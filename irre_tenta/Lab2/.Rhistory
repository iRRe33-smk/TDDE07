gini_kernel_density_values
which(max(gini_kernel_density_values))
which.max(gini_kernel_density_values)
gini_kernel_density_coordinates[95]
gini_kernel_density_coordinates = gini_kernel_density_coordinates[order(-gini_kernel_density_values)]
gini_kernel_density_values = gini_kernel_density_values[order(-gini_kernel_density_values)]
gini_kernel_density_coordinates
gini_kernel_density_values
sum <- 0
HPDI_lowerbound <- 0
HPDI_upperbound <- gini_kernel_density_coordinates[1]
for(i in 1:length(gini_kernel_density_coordinates)){
sum = sum + gini_kernel_density_values[i]
if(sum>0.95*sum(gini_kernel_density_values)){
HPDI_lowerbound <- gini_kernel_density_coordinates[i]
break
}
}
print(c(HPDI_lowerbound, HPDI_upperbound))
hdi_test = hdi(distribution_gini, ci = 0.95)
hdi_test
sum <- 0s
print(c(min(gini_kernel_density_coordinates[1:index_HDPI]), max(gini_kernel_density_coordinates[1:index_HDPI])))
sum <- 0
index_HDPI <- -1
for(i in 1:length(gini_kernel_density_coordinates)){
sum = sum + gini_kernel_density_values[i]
if(sum>0.95*sum(gini_kernel_density_values)){
index_HDPI <- i
break
}
}
print(c(min(gini_kernel_density_coordinates[1:index_HDPI]), max(gini_kernel_density_coordinates[1:index_HDPI])))
hdi_test = hdi(distribution_gini, ci = 0.95)
hdi_test
source("~/Desktop/Masters - LIU/Course/Sem 2/Period 2/TDDE07 Bayesian Learning/Labs/baysian-learning/Lab 1/lab1_2.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
sum(gini_kernel_density_values)
sum(gini_kernel_density_coordinates)
plot(used_k,res_norm)
source("~/Desktop/Masters - LIU/Course/Sem 2/Period 2/TDDE07 Bayesian Learning/Labs/baysian-learning/Lab 1/lab1_2.R", echo=TRUE)
p_cond <- function(y,mu,k){
n = length(y)
res = (1/(2*pi*besselI(k,0))^n) * exp(sum(k*cos(y-mu))-k)
return(res)
}
y= c(1.83, 2.02, 2.33, -2.79, 2.07, 2.02, -2.44, 2.14, 2.54, 2.23)
N=1500
res = c()
used_k = c()
for (k in seq(0,10*N)){
res = c(res,p_cond(y,2.51,k/N))
used_k = c(used_k,k/N)
}
s
#plot(density(res))
sum(density(res)$y)
res_norm = res/sum(res)
plot(used_k,res_norm)
# reccheck - posterior mode is count
used_k[res==max(res)]
#dense = density(res)
# 2.a)
tau_sq = sum((log(y)-mu)^2)/n
#theta_draws = c()
# can be optimized by using rchisq(1E5,n)
X_draws = rchisq(1E5,n-1)
sigma_sq = (n-1)*tau_sq / X_draws   # our posterior is scaled Inv−χ2(n,τ2) hence using n instead of n-1 as in slides
inversechisq <- function(x, v, s){
density = (((v/2)^(v/2))/gamma(v/2)) * (s^v) * (x^(-(v/2+1))) * (exp((-v*s^2)/(2*x)))
return (density)
}
plot(density(sigma_sq), title="Simulated and theoretical posteriors for sigma^2")        # Plotting posterior draws from sampling
lines(seq(0.1,6,by=0.1), inversechisq(seq(0.1,6,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red")  # Plotting posterior distribution using density function
y = c(33,24,48,32,55,74,23,76, 17)
mu = 3.5
n = 9
# 2.a)
tau_sq = sum((log(y)-mu)^2)/n
#theta_draws = c()
# can be optimized by using rchisq(1E5,n)
X_draws = rchisq(1E5,n-1)
sigma_sq = (n-1)*tau_sq / X_draws   # our posterior is scaled Inv−χ2(n,τ2) hence using n instead of n-1 as in slides
inversechisq <- function(x, v, s){
density = (((v/2)^(v/2))/gamma(v/2)) * (s^v) * (x^(-(v/2+1))) * (exp((-v*s^2)/(2*x)))
return (density)
}
plot(density(sigma_sq), title="Simulated and theoretical posteriors for sigma^2")        # Plotting posterior draws from sampling
lines(seq(0.1,6,by=0.1), inversechisq(seq(0.1,6,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red")  # Plotting posterior distribution using density function
plot(density(sigma_sq), title="Simulated and theoretical posteriors for sigma^2")        # Plotting posterior draws from sampling
hist(sigma_sq)#, title="Simulated and theoretical posteriors for sigma^2")        # Plotting posterior draws from sampling
lines(seq(0.1,6,by=0.1), inversechisq(seq(0.1,6,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red")  # Plotting posterior distribution using density function
density
density
plot(density(sigma_sq), title="Simulated and theoretical posteriors for sigma^2")        # Plotting posterior draws from sampling
lines(seq(0.1,6,by=0.1), inversechisq(seq(0.1,6,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red")  # Plotting posterior distribution using density function
#theta_draws = c()
# can be optimized by using rchisq(1E5,n)
X_draws = rchisq(1E5,n)
sigma_sq = (n)*tau_sq / X_draws   # our posterior is scaled Inv−χ2(n,τ2) hence using n instead of n-1 as in slides
inversechisq <- function(x, v, s){
density = (((v/2)^(v/2))/gamma(v/2)) * (s^v) * (x^(-(v/2+1))) * (exp((-v*s^2)/(2*x)))
return (density)
}
plot(density(sigma_sq), title="Simulated and theoretical posteriors for sigma^2")        # Plotting posterior draws from sampling
lines(seq(0.1,6,by=0.1), inversechisq(seq(0.1,6,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red")  # Plotting posterior distribution using density function
distribution_gini = 2 * pnorm(sqrt(sigma_sq/2)) - 1
plot(1:length(distribution_gini), sort(distribution_gini), type = "l")
plot(density(distribution_gini))
num = length(distribution_gini)
sorted = sort(distribution_gini)
credible_interval = sorted[floor(num*0.025):floor(num*0.975)]
c_sum = cumsum(sort(distribution_gini))
total = c_sum[length(c_sum)]
c_sum_norm <- c_sum / total
lower <- 0
upper <- 0
N = length(c_sum)
for (i in 1:as.integer(N/2)){
if (c_sum_norm[i] < 0.025){
lower <- i
}
if (c_sum_norm[N-i] > 0.975){
upper <- N-i
}
}
abline(v = sorted[lower])
abline(v = sorted[upper])
sum(sorted[lower:upper]/sum(sorted))
sum(sorted[1:lower]/sum(sorted))
sum(sorted[upper:N]/sum(sorted))
break_p = sorted[num*0.05]
sorted[sorted > break_p]
sum(sorted[1:lower]/sum(sorted))
sum(sorted[upper:N]/sum(sorted))
sum(sorted[lower:upper]/sum(sorted))
quantile(distribution_gini, probs = c(0.025,0.977))
abline(v = sorted[lower])
abline(v = sorted[upper])
quantile(distribution_gini, probs = c(0.025,0.977))
ci = quantile(distribution_gini, probs = c(0.025,0.977))
abline(v = ci[1])
abline(v = ci[2])
df = data.frame(x=dense$x,y=dense$y)
df = df[order(df$y),]
dense = density(sorted)
df = data.frame(x=dense$x,y=dense$y)
df = df[order(df$y),]
df$cumsum = cumsum(df$y)
df = df[df$cumsum>.05 * sum(df$y),c("x","y","cumsum")]
head(df)
sum(df$y) / sum(dense$y)
points(df,col="red")
plot(used_k,res_norm)
# reccheck - posterior mode is count
used_k[res==max(res)]
library(manipulate)
sucess <- 13
n_trails <- 50
failures <- 37
alpha <- 5
beta <- 5
# Function to calculcate and plot mean of posterior Distribution Random Draws
PosteriorDraws_MeanPlot <- function(alpha, beta, n, sucess_proportions){
mean_posterior <-  list()
for(i in 1:n){
posterior_draws = rbeta(i, alpha+sucess, beta+failures)
mean_posterior[i] <- mean(posterior_draws)
}
print(mean_posterior[n])
plot(c(1:n), mean_posterior, type = 'l', lwd = 1, col = "blue", xlab = "number of Random Draws",
ylab = 'mean of Draws', main = 'Mean plot Posteriors')
}
# Function to calculcate and plot SD of posterior Distribution Random Draws
PosteriorDraws_SDPlot <- function(alpha, beta, n, sucess_proportions){
sd_posterior <- list()
for(i in 1:n){
posterior_draws = rbeta(i, alpha+sucess, beta+failures)
sd_posterior[i] <- sd(posterior_draws)
}
print(sd_posterior[n])
plot(c(1:n), sd_posterior, type = 'l', lwd = 1, col = "red", xlab = "number of Random Draws",  ylab = 'SD of Draws', main = 'SD plot Posteriors')
}
manipulate(
PosteriorDraws_MeanPlot(alpha, beta, n, sucess/n_trails),
n = slider(1, 100000, step=100, initial = 10000, label = "Number of trails(Random Draws)")
)
manipulate(
PosteriorDraws_SDPlot(alpha, beta, n, sucess/n_trails),
n = slider(1, 100000, step=100, initial = 10000, label = "Number of trails(Random Draws)")
)
# True mean of beta distribution -> alpha/(alpha+beta), so true mean of posterior
true_mean = (alpha+sucess)/((alpha+sucess)+(beta+failures))
print(true_mean)
# True variance of beta distribution -> (alpha*beta)/((alpha+beta+1) * (alpha + beta)^2)
true_sd = sqrt(((alpha+sucess)*(beta+failures))/((alpha+sucess+beta+failures+1) * (alpha + sucess + beta + failures)^2))
print(true_sd)
# Task 1. b)
posterior_draws <-  rbeta(10000, alpha+sucess, beta+failures)              # taking 10000 random draws from the posterior beta distribution
count_density_less <- length(posterior_draws[posterior_draws<0.3])         # counting number of draws with value less than 0.3
posterior_probablity_less <- count_pobablity_less/10000                    # calculating probability of draws with value < 0.3
posterior_probablity_less_exact <- pbeta(0.3, alpha+sucess, beta+failures) # using pbeta to find the same probability using cumulative frequency of beta distribution
posterior_probablity_less_exact
posterior_probablity_less
posterior_draws <-  rbeta(10000, alpha+sucess, beta+failures)              # taking 10000 random draws from the posterior beta distribution
posterior_logodds <- log(posterior_draws/(1-posterior_draws))              # converting to log odds using simulated draws from beta posterior
hist(posterior_logodds)                                                    # plotting posterior distribution of log-odds
plot(density(posterior_logodds))                                           # plotting posterior distribution of log-odds
manipulate(
PosteriorDraws_MeanPlot(alpha, beta, n, sucess/n_trails),
n = slider(1, 100000, step=100, initial = 10000, label = "Number of trails(Random Draws)")
)
# True mean of beta distribution -> alpha/(alpha+beta), so true mean of posterior
true_mean = (alpha+sucess)/((alpha+sucess)+(beta+failures))
abline(h=true_mean)
print(true_mean)
abline(h=true_mean, col = "red", type="l", lty=2)
manipulate(
PosteriorDraws_MeanPlot(alpha, beta, n, sucess/n_trails),
n = slider(1, 100000, step=100, initial = 10000, label = "Number of trails(Random Draws)")
)
# True mean of beta distribution -> alpha/(alpha+beta), so true mean of posterior
true_mean = (alpha+sucess)/((alpha+sucess)+(beta+failures))
abline(h=true_mean, col = "red", type="l", lty=2)
print(true_mean)
manipulate(
PosteriorDraws_SDPlot(alpha, beta, n, sucess/n_trails),
n = slider(1, 100000, step=100, initial = 10000, label = "Number of trails(Random Draws)")
)
manipulate(
PosteriorDraws_MeanPlot(alpha, beta, n, sucess/n_trails),
n = slider(1, 100000, step=100, initial = 10000, label = "Number of trails(Random Draws)")
)
# True mean of beta distribution -> alpha/(alpha+beta), so true mean of posterior
true_mean = (alpha+sucess)/((alpha+sucess)+(beta+failures))
abline(h=true_mean, col = "red", type="l", lty=2)
print(true_mean)
manipulate(
PosteriorDraws_SDPlot(alpha, beta, n, sucess/n_trails),
n = slider(1, 100000, step=100, initial = 10000, label = "Number of trails(Random Draws)")
)
# True variance of beta distribution -> (alpha*beta)/((alpha+beta+1) * (alpha + beta)^2)
true_sd = sqrt(((alpha+sucess)*(beta+failures))/((alpha+sucess+beta+failures+1) * (alpha + sucess + beta + failures)^2))
print(true_sd)
abline(h=true_sd, col = "green", type="l", lty=2)
manipulate(
PosteriorDraws_MeanPlot(alpha, beta, n, sucess/n_trails),
n = slider(1, 100000, step=100, initial = 10000, label = "Number of trails(Random Draws)")
)
# True mean of beta distribution -> alpha/(alpha+beta), so true mean of posterior
true_mean = (alpha+sucess)/((alpha+sucess)+(beta+failures))
legend("bottomleft", c("4","6","8"), fill=topo.colors(3), horiz=TRUE, cex=0.8)
abline(h=true_mean, col = "green", type="l", lty=2)
print(true_mean)
legend("bottomright", c("4","6","8"), fill=topo.colors(3), horiz=TRUE, cex=0.8)
legend("bottomright", c("4","6","8"), fill=topo.colors(3), cex=0.8)
legend("bottomright", inset=.02, c("Mean posterior Draws"), fill=c("blue"), cex=0.8)
legend("bottomright", title = "Legend", inset=.02, c("Mean posterior Draws"), fill=c("blue"), cex=0.8)
legend("bottomright", inset=.02, c("Mean posterior Draws"), fill=c("blue"), cex=0.8, lty=c(2), legend = c("Theorical Mean"), col = c("green"))
legend("bottomright", inset=.02, c("Mean posterior Draws", "Theortical Mean"), fill=c("blue"), cex=0.8, lty=c(2), col = c("green"))
legend("bottomright", inset=.02, c("Mean posterior Draws", "Theortical Mean"), fill=c("blue", "green"))
legend("bottomright", inset=.02, c("Standard Deviation posterior Draws", "Theoretical Standard Deviation"), fill=c("blue", "green"))
legend("bottomright", inset=.02, c("Standard Deviation posterior Draws", "Theoretical Standard Deviation"), fill=c("red", "green"))
manipulate(
PosteriorDraws_MeanPlot(alpha, beta, n, sucess/n_trails),
n = slider(1, 100000, step=100, initial = 10000, label = "Number of trails(Random Draws)")
)
# True mean of beta distribution -> alpha/(alpha+beta), so true mean of posterior
true_mean = (alpha+sucess)/((alpha+sucess)+(beta+failures))
legend("bottomright", inset=.02, c("Mean posterior Draws", "Theoretical Mean"), fill=c("blue", "green"))
abline(h=true_mean, col = "green", type="l", lty=2)
print(true_mean)
manipulate(
PosteriorDraws_SDPlot(alpha, beta, n, sucess/n_trails),
n = slider(1, 100000, step=100, initial = 10000, label = "Number of trails(Random Draws)")
)
# True variance of beta distribution -> (alpha*beta)/((alpha+beta+1) * (alpha + beta)^2)
true_sd = sqrt(((alpha+sucess)*(beta+failures))/((alpha+sucess+beta+failures+1) * (alpha + sucess + beta + failures)^2))
print(true_sd)
legend("bottomright", inset=.02, c("Standard Deviation posterior Draws", "Theoretical Standard Deviation"), fill=c("red", "green"))
abline(h=true_sd, col = "green", type="l", lty=2)
# Task 1. b)
posterior_draws <-  rbeta(10000, alpha+sucess, beta+failures)              # taking 10000 random draws from the posterior beta distribution
count_density_less <- length(posterior_draws[posterior_draws<0.3])         # counting number of draws with value less than 0.3
posterior_probablity_less <- count_pobablity_less/10000                    # calculating probability of draws with value < 0.3
posterior_probablity_less_exact <- pbeta(0.3, alpha+sucess, beta+failures) # using pbeta to find the same probability using cumulative frequency of beta distribution
posterior_probablity_less_exact
posterior_probablity_less
posterior_probablity_less <- count_pobablity_less/10000                    # calculating probability of draws with value < 0.3
count_density_less <- length(posterior_draws[posterior_draws<0.3])         # counting number of draws with value less than 0.3
posterior_probablity_less <- count_density_less/10000                    # calculating probability of draws with value < 0.3
posterior_probablity_less_exact <- pbeta(0.3, alpha+sucess, beta+failures) # using pbeta to find the same probability using cumulative frequency of beta distribution
posterior_probablity_less_exact
posterior_probablity_less
# Task 1. c)
posterior_draws <-  rbeta(10000, alpha+sucess, beta+failures)              # taking 10000 random draws from the posterior beta distribution
posterior_logodds <- log(posterior_draws/(1-posterior_draws))              # converting to log odds using simulated draws from beta posterior
hist(posterior_logodds)                                                    # plotting posterior distribution of log-odds
plot(density(posterior_logodds))                                           # plotting posterior distribution of log-odds
hist(posterior_logodds)                                                    # plotting posterior distribution of log-odds
lines(density(posterior_logodds))                                           # plotting posterior distribution of log-odds
hist(posterior_logodds, freq = FALSE)                                                    # plotting posterior distribution of log-odds
lines(density(posterior_logodds))                                           # plotting posterior distribution of log-odds
y = c(33,24,48,32,55,74,23,76, 17)
mu = 3.5
n = 9
tau_sq = sum((log(y)-mu)^2)/n
X_draws = rchisq(1E5,n-1)
sigma_sq = (n-1)*tau_sq / X_draws   # Simulating draws from Inv−χ2(n,τ) distribution
# Theoretical density function for Inv−χ2(n,τ) distribution
inversechisq <- function(x, v, s){
density = (((v/2)^(v/2))/gamma(v/2)) * (s^v) * (x^(-(v/2+1))) * (exp((-v*s^2)/(2*x)))
return (density)
}
# Plotting posterior draws from sampling
plot(density(sigma_sq), title="Simulated and theoretical posteriors for sigma^2")
# Plotting posterior distribution using therotical density function
lines(seq(0.1,6,by=0.1), inversechisq(seq(0.1,6,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red")
# Plotting posterior distribution using therotical density function
lines(seq(0.1,6,by=0.1), inversechisq(seq(0.1,6,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red", lty=2)
# Plotting posterior draws from sampling
plot(density(sigma_sq), title="Simulated and theoretical posteriors for sigma^2")
# Plotting posterior distribution using therotical density function
lines(seq(0.1,6,by=0.1), inversechisq(seq(0.1,6,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red", lty=2)
# Plotting posterior draws from sampling
plot(density(sigma_sq), title="Simulated and theoretical posteriors for sigma^2")
# Plotting posterior distribution using therotical density function
lines(seq(0.1,6,by=0.1), inversechisq(seq(0.1,6,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red", lty=2, lwd=3)
# Plotting posterior draws from sampling
plot(density(sigma_sq), lwd=3. title="Simulated and theoretical posteriors for sigma^2")
# Plotting posterior draws from sampling
plot(density(sigma_sq), lwd=3, title="Simulated and theoretical posteriors for sigma^2")
# Plotting posterior distribution using therotical density function
lines(seq(0.1,6,by=0.1), inversechisq(seq(0.1,6,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red", lty=2, lwd=3)
legend("topright", inset=.02, c("Posterior Draws", "Theoretical Posterior Density"), fill=c("black", "red"))
legend("topright", inset=.02, c("Simulated Posterior Draws", "Theoretical Posterior Density"), fill=c("black", "red"))
# Plotting posterior draws from sampling
plot(density(sigma_sq), lwd=3, title="Simulated and theoretical posteriors for sigma^2")
# Plotting posterior distribution using therotical density function
lines(seq(0.1,6,by=0.1), inversechisq(seq(0.1,6,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red", lty=2, lwd=3)
legend("topright", inset=.02, c("Simulated Posterior Draws", "Theoretical Posterior Density"), fill=c("black", "red"))
# Plotting posterior draws from sampling
plot(density(sigma_sq), lwd=3, main="Simulated and theoretical posteriors for sigma^2")
# Plotting posterior distribution using therotical density function
lines(seq(0.1,6,by=0.1), inversechisq(seq(0.1,6,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red", lty=2, lwd=3)
legend("topright", inset=.02, c("Simulated Posterior Draws", "Theoretical Posterior Density"), fill=c("black", "red"))
# Plotting posterior draws from sampling
plot(density(sigma_sq), lwd=3, title="Simulated and theoretical posteriors for sigma^2")
# Plotting posterior draws from sampling
plot(density(sigma_sq), lwd=3, main="Simulated and theoretical posteriors for sigma^2")
# Plotting posterior distribution using therotical density function
lines(seq(0.1,6,by=0.1), inversechisq(seq(0.1,6,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red", lty=2, lwd=3)
legend("topright", inset=.02, c("Simulated Posterior Draws", "Theoretical Posterior Density"), fill=c("black", "red"))
# Plotting posterior draws from sampling
plot(density(sigma_sq), lwd=3, main="Simulated and theoretical posteriors for sigma^2")
# Plotting posterior distribution using therotical density function
lines(seq(0.1,15,by=0.1), inversechisq(seq(0.1,6,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red", lty=2, lwd=3)
legend("topright", inset=.02, c("Simulated Posterior Draws", "Theoretical Posterior Density"), fill=c("black", "red"))
# Plotting posterior draws from sampling
plot(density(sigma_sq), lwd=3, main="Simulated and theoretical posteriors for sigma^2")
# Plotting posterior distribution using therotical density function
lines(seq(0.1,15,by=0.1), inversechisq(seq(0.1,15,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red", lty=2, lwd=3)
legend("topright", inset=.02, c("Simulated Posterior Draws", "Theoretical Posterior Density"), fill=c("black", "red"))
# Plotting posterior draws from sampling
plot(density(sigma_sq), lwd=3, main="Simulated and theoretical posteriors for sigma^2")
# Plotting posterior distribution using therotical density function
lines(seq(0.01,15,by=0.1), inversechisq(seq(0.1,15,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red", lty=2, lwd=3)
legend("topright", inset=.02, c("Simulated Posterior Draws", "Theoretical Posterior Density"), fill=c("black", "red"))
# Plotting posterior draws from sampling
plot(density(sigma_sq), lwd=3, main="Simulated and theoretical posteriors for sigma^2")
# Plotting posterior distribution using therotical density function
lines(seq(0.1,15,by=0.1), inversechisq(seq(0.1,15,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red", lty=2, lwd=3)
legend("topright", inset=.02, c("Simulated Posterior Draws", "Theoretical Posterior Density"), fill=c("black", "red"))
# Plotting posterior draws from sampling
plot(density(sigma_sq), lwd=3, main="Simulated and theoretical posteriors for sigma^2")
# Plotting posterior distribution using therotical density function
lines(seq(0,15,by=0.1), inversechisq(seq(0.1,15,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red", lty=2, lwd=3)
legend("topright", inset=.02, c("Simulated Posterior Draws", "Theoretical Posterior Density"), fill=c("black", "red"))
# Plotting posterior draws from sampling
plot(density(sigma_sq), lwd=3, main="Simulated and theoretical posteriors for sigma^2")
# Plotting posterior distribution using therotical density function
lines(seq(0.1,15,by=0.1), inversechisq(seq(0.1,15,by=0.1), n, sqrt(tau_sq)), type = "l", col =  "red", lty=2, lwd=3)
legend("topright", inset=.02, c("Simulated Posterior Draws", "Theoretical Posterior Density"), fill=c("black", "red"))
# 2.b)
# Calculating and plotting Gini coefficient from posterior Draws
distribution_gini = 2 * pnorm(sqrt(sigma_sq/2)) - 1
plot(1:length(distribution_gini), sort(distribution_gini), type = "l")
plot(density(distribution_gini))
legend("topright", inset=.02, c("Posterior Distribution Gini Cofficent"), fill=c("black"))
plot(density(distribution_gini), main = "Posterior Distribution Gini Coefficent")
# Plotting Confidence Intervals
plot(density(distribution_gini), main = "Confidence Intervel - Posterior Distribution Gini Coefficent")
abline(v = sorted[lower])
abline(v = sorted[upper])
# Plotting Confidence Intervals
plot(density(distribution_gini), main = "Confidence Intervel - Posterior Distribution Gini Coefficent")
abline(v = sorted[lower], col = "red")
abline(v = sorted[upper], col = "red")
legend("topright", inset=.02, c("Confidence Intervel"), fill=c("red"))
# Plotting Confidence Intervals
plot(density(distribution_gini), main = "95% Equal Trail Confidence Intervel - Posterior Distribution Gini Coefficent")
abline(v = sorted[lower], col = "green")
abline(v = sorted[upper], col = "green")
legend("topright", inset=.02, c("Confidence Intervel"), fill=c("green"))
sum(sorted[lower:upper]/sum(sorted))
sum(sorted[1:lower]/sum(sorted))
sum(sorted[upper:N]/sum(sorted))
break_p = sorted[num*0.05]
source("~/Desktop/Masters - LIU/Course/Sem 2/Period 2/TDDE07 Bayesian Learning/Labs/baysian-learning/Lab 1/lab1_2.R", echo=TRUE)
legend("topright", inset=.02, c("95% Equal Tail Confidence Intervel", "Highest Density Posterior Intervel"), fill=c("green", "red"))
legend("topright", inset=.01, c("95% Equal Tail Confidence Intervel", "Highest Density Posterior Intervel"), fill=c("green", "red"))
# Plotting Confidence Intervals
plot(density(distribution_gini), main = "95% Equal Trail Confidence Intervel - Posterior Distribution Gini Coefficent")
abline(v = sorted[lower], col = "green")
abline(v = sorted[upper], col = "green")
legend("topright", inset=.02, c("Confidence Intervel"), fill=c("green"))
# Checking if found confidence interval is correct
sum(sorted[lower:upper]/sum(sorted))
sum(sorted[1:lower]/sum(sorted))
sum(sorted[upper:N]/sum(sorted))
# Finding density of gini distribution
dense = density(sorted)
# storing coordinate and desnity values in a dataframe
df = data.frame(x=dense$x,y=dense$y)
# sorting dataframe based on density values
df = df[order(df$y),]
# Finding cumulative sum of sorted density values
df$cumsum = cumsum(df$y)
# finding all points at which the cumulative sum is > 5% if the total density ( 95% Highest density posterior interval)
df = df[df$cumsum>.05 * sum(df$y),c("x","y","cumsum")]
head(df)
# verifying if we have found the correct interval
sum(df$y) / sum(dense$y)
# plotting the HDPI
points(df,col="red")
legend("topright", inset=.01, c("95% Equal Tail Confidence Intervel", "Highest Density Posterior Intervel"), fill=c("green", "red"))
# Simulating 15000 posterior distribution over a k grid of 0-10
N=1500
res = c()
used_k = c()
for (k in seq(0,10*N)){
res = c(res,p_cond(y,2.51,k/N))
used_k = c(used_k,k/N)
}
# Normalizing density values by dividing by total sum of densities
res_norm = res/sum(res)
# Plotting k values against densities
plot(used_k,res_norm)
# Function for the posterior distribution with n data points
p_cond <- function(y,mu,k){
n = length(y)
res = (1/(2*pi*besselI(k,0))^n) * exp(sum(k*cos(y-mu))-k)
return(res)
}
y= c(1.83, 2.02, 2.33, -2.79, 2.07, 2.02, -2.44, 2.14, 2.54, 2.23)
# Simulating 15000 posterior distribution over a k grid of 0-10
N=1500
res = c()
used_k = c()
for (k in seq(0,10*N)){
res = c(res,p_cond(y,2.51,k/N))
used_k = c(used_k,k/N)
}
# Normalizing density values by dividing by total sum of densities
res_norm = res/sum(res)
# Plotting k values against densities
plot(used_k,res_norm)
source("~/Desktop/Masters - LIU/Course/Sem 2/Period 2/TDDE07 Bayesian Learning/Labs/baysian-learning/Lab 1/lab1_3.R", echo=TRUE)
count(res)
#dense = density(res)
table(res)
# The mode of a distribution with a discrete random variable is the value of the term that occurs the most often
# i.e the value of k with the highest probability density
used_k[res==max(res)]
abline(v=used_k[res==max(res)])
abline(v=used_k[res==max(res)], co = "red")
abline(v=used_k[res==max(res)], col = "red")
legend("topright", inset=.01, c("Posterior mode of k"), fill=c("red"))
# Plotting k values against densities
plot(used_k,res_norm, main = "Posterior Distribution of k Values")
# The mode of a distribution with a discrete random variable is the value of the term that occurs the most often
# i.e the value of k with the highest probability density
used_k[res==max(res)]
abline(v=used_k[res==max(res)], col = "red")
legend("topright", inset=.01, c("Posterior mode of k"), fill=c("red"))
abline(v=used_k[res==max(res)], col = "red", type="l", lty=2)
# Plotting k values against densities
plot(used_k,res_norm, main = "Posterior Distribution of k Values")
# The mode of a distribution with a discrete random variable is the value of the term that occurs the most often
# i.e the value of k with the highest probability density
used_k[res==max(res)]
abline(v=used_k[res==max(res)], col = "red", type="l", lty=2)
legend("topright", inset=.01, c("Posterior mode of k"), fill=c("red"), )
source("~/Desktop/Masters - LIU/Course/Sem 2/Period 2/TDDE07 Bayesian Learning/Labs/baysian-learning/Lab1/lab1_all.R", echo=TRUE)
q()
source("~/Desktop/Masters - LIU/Course/Sem 2/Period 2/TDDE07 Bayesian Learning/Labs/baysian-learning/Lab2/lab2_2.r", echo=TRUE)
setwd("~/Desktop/Masters - LIU/Course/Sem 2/Period 2/TDDE07 Bayesian Learning/Labs/baysian-learning/Lab2")
source("~/Desktop/Masters - LIU/Course/Sem 2/Period 2/TDDE07 Bayesian Learning/Labs/baysian-learning/Lab2/lab2_2.r", echo=TRUE)
source("~/Desktop/Masters - LIU/Course/Sem 2/Period 2/TDDE07 Bayesian Learning/Labs/baysian-learning/Lab2/lab2_1.r", echo=TRUE)
# # 2.1.b.i)
# # Plotting histogram for each of the marginal posterior parameters
hist(betas[,1], freq = FALSE, main = "Histogram of Beta 0")
source("~/Desktop/Masters - LIU/Course/Sem 2/Period 2/TDDE07 Bayesian Learning/Labs/baysian-learning/Lab2/lab2_1.r", echo=TRUE)
source("~/Desktop/Masters - LIU/Course/Sem 2/Period 2/TDDE07 Bayesian Learning/Labs/baysian-learning/Lab2/lab2_1.r", echo=TRUE)
source("~/Desktop/Masters - LIU/Course/Sem 2/Period 2/TDDE07 Bayesian Learning/Labs/baysian-learning/Lab2/lab2_2.r", echo=TRUE)
source("~/Desktop/Masters - LIU/Course/Sem 2/Period 2/TDDE07 Bayesian Learning/Labs/baysian-learning/Lab2/lab2_2.r", echo=TRUE)
source("~/Desktop/Masters - LIU/Course/Sem 2/Period 2/TDDE07 Bayesian Learning/Labs/baysian-learning/Lab2/lab2_2.r", echo=TRUE)
legend("topleft", inset=.02, c("95% equal tailed credible intervel"), fill=c("black"))
legend("topleft", inset=.02, c("95% equal tailed credible intervel"), fill=c("red"))
source("~/Desktop/Masters - LIU/Course/Sem 2/Period 2/TDDE07 Bayesian Learning/Labs/baysian-learning/Lab2/lab2_2.r", echo=TRUE)
